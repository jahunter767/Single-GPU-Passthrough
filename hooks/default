#!/bin/bash

# Declaring global variables
declare -g DOMAIN_NAME
declare -g GUEST_NAME
declare -g HOOK_NAME
declare -g STATE_NAME
declare -g MISC
declare -g HOOK_FOLDER
declare -g TMP_CONFIG_PATH
declare -g LOG_FILE

DOMAIN_NAME="$(basename "${0}")"
GUEST_NAME="${1}"
HOOK_NAME="${2}"
STATE_NAME="${3}"
MISC="${@:4}"

HOOK_FOLDER="${0%/${DOMAIN_NAME}}"
# TMP_CONFIG_PATH="/tmp/libvirt-xml/${DOMAIN_NAME}/${GUEST_NAME}"
TMP_CONFIG_PATH="tmp/libvirt-xml/${DOMAIN_NAME}/${GUEST_NAME}"
# HOOK_LOG_PATH="/var/log/libvirt/hooks/${DOMAIN_NAME}"
HOOK_LOG_PATH="${HOOK_FOLDER}/${DOMAIN_NAME}.d/${GUEST_NAME}"
# LOG_FILE="${HOOK_LOG_PATH}/${GUEST_NAME}.log"
LOG_FILE="${HOOK_LOG_PATH}/vm.log"

mkdir -p "${HOOK_LOG_PATH}"

#-----------------------------------------------------------------------------
# Parse XML and create a file system in tmp representing its structure then
# loads the data into the relevant variables using the load_config_data function
# implemented in ${HOOK_FOLDER}/default.d/${DOMAIN_NAME}
#
# @TODO: Improve the speed that the XML is parsed
#-----------------------------------------------------------------------------
function parse_xml {
    if [ -z "$(command -v "load_config_data")" ]; then
        echo "ERROR: load_config_data not defined in ${HOOK_FOLDER}/default.d/${DOMAIN_NAME}" 1>&2
        exit 2
    fi

    if [ -d "${TMP_CONFIG_PATH}" ]; then
        while read f; do
            if [[ -n "$(basename ${f})" && "$(basename ${f})" != "state" ]]; then
                rm -r "${f}"
            fi
        done <<< $(ls -d1 ${TMP_CONFIG_PATH}/*)
    fi
    mkdir -p "${TMP_CONFIG_PATH}"

    declare -a tag_stack
    local tag_path="${TMP_CONFIG_PATH}"
    local parent_tag_path="${TMP_CONFIG_PATH}"

    local tag_name_regex="([^[:space:]\<\>/])+"
    local body_regex="[^\<\>]*"
    local tag_arg_regex="${tag_name_regex}=[\"\'][^\<\>\"']*[\"\']"
    local tag_arg_lst_regex="(([[:space:]])*${tag_arg_regex})*"

    while read xml_line; do
        # Gets the first tag name in the line (ignoring any other possible tag
        # names)
        read tag_name <<< $(echo "${xml_line}" | grep -oP "<[/]?${tag_name_regex}")
        local tag_name=${tag_name#\<}
        local tag_name=${tag_name#/}

        local open_tag_regex="<${tag_name}${tag_arg_lst_regex}>"
        local close_tag_regex="</${tag_name}>"
        # Matches lines like this <test arg="a1">value</test>
        local one_line_tag_regex="${open_tag_regex}[^\<\>]*${close_tag_regex}"
        # Matches tags like this <test arg="a1"/>
        local self_closing_tag_regex="<${tag_name}${tag_arg_lst_regex}/>"

        # Updates the tag stack and current and parent tag paths
        if [[ "${xml_line}" =~ ${self_closing_tag_regex}|${one_line_tag_regex} ]]
        then
            local tag_path="${parent_tag_path}/${tag_name}"

        elif [[ "${xml_line}" =~ ${close_tag_regex} ]]; then
            if [ ${#tag_stack[@]} -gt 0 ]; then
                parent_tag_path="${parent_tag_path%/${tag_stack[-1]}-*}"
                tag_path="${parent_tag_path}"
                parent_tag_path="${parent_tag_path%/${tag_stack[-1]}}"
                unset tag_stack[-1]
            else
                echo "ERROR: Unexpected closing tag found: ${xml_line}" 1>&2
                exit 2
            fi

        elif [[ "${xml_line}" =~ ${open_tag_regex} ]]; then
            tag_stack[${#tag_stack[@]}]="${tag_name}"
            local parent_tag_path="${parent_tag_path}/${tag_stack[-1]}"
            local tag_path="${parent_tag_path}"

        elif [[ "${xml_line}" =~ ([\<\>]) ]]; then
            # If it has angle brackets but isn't a tag
            echo "ERROR: Failed to parse the line: ${xml_line}" 1>&2
            exit 2
        fi

        # Handles if another tag with the same name at the current path of the
        # xml is encountered
        if [[ -n "${tag_name}" && (! "${xml_line}" =~ ${close_tag_regex}) &&
            -d "${tag_path}" ]]
        then
            # If there aren't any subfolders for each repreated tag then we can
            # assume that the existing folder is the first instance of that tag
            # so we rename it to reflect that, create a new folder with the tag
            # name and move it into that
            if [ ! -d "${tag_path}/${tag_name}-1" ] ; then
                mv "${tag_path}" "${tag_path}-1"
                mkdir -p "${tag_path}"
                mv "${tag_path}-1" "${tag_path}/"
            fi

            readarray dir_lst <<< $(ls -d1 ${tag_path}/${tag_name}-*)
            local tag_path="${tag_path}/${tag_name}-$(( ${#dir_lst[@]} + 1 ))"
            # If the current parent tag is is the repeated tag then save the
            # new path so it may be preserved for the nested tags. It will be
            # reset once the closing parent tag is encountered
            if [[ ${tag_name} == ${tag_stack[-1]} ]]; then
                local parent_tag_path="${tag_path}"
            fi
        fi
        mkdir -p "${tag_path}"

        # Parses for string body between tags. Empty lines are ignored unless
        # the parent tag is a description tag
        local value="${xml_line#*\<${tag_name}*\>}"
        local value="${value%${close_tag_regex}*}"
        local value="${value/*${self_closing_tag_regex}*}"
        if [[ -n "${value}" ||
            ( ${#tag_stack[@]} -gt 0 && "${tag_stack[-1]}" == "description") ]]
        then
            echo "${value}" >> "${tag_path}/value"
        fi

        # Parse for tag args
        read open_tag <<< $(echo "${xml_line}" | grep -oP "<${tag_name}${tag_arg_lst_regex}[/]?>")
        while read arg; do
            if [[ -n "${arg}" ]]; then
                local val="${arg##*=[\"\']}"
                echo "${val%[\"\']}" > "${tag_path}/${arg%%=*}.val"
            fi
        done <<< $(echo ${open_tag} | grep -oP "${tag_arg_regex}")
    done < /dev/stdin

    load_config_data
} # End-parse_xml

function parse_description_args {
    local desc="${1}"
    read args <<< $(echo "${desc}" |
        grep -oPm1 "(args\[)([[:space:]]*--[[:word:]-]+)+([[:space:]]*\])")
    echo "${args}" | grep -oP "(--[[:word:]-]+)"
} # End-parse_description_args

##############################################################################
# Read in all the functions needed for the VM. Reads in the default scripts
# first so users can override functions by redefining them in the unique
# path for the VM being started.
# Order scripts are read:
#     1. ${HOOK_FOLDER}/default.d/${DOMAIN_NAME}
#     2. ${HOOK_FOLDER}/${DOMAIN_NAME}.d/default/${HOOK_NAME}/${STATE_NAME}
#     3. ${HOOK_FOLDER}/${DOMAIN_NAME}.d/${GUEST_NAME}/${HOOK_NAME}/${STATE_NAME}
##############################################################################

function include_functions {
    local hpath="${1}"

    # Author: Sebastiaan Meijer (sebastiaan@passthroughpo.st)
    # check if it's a non-empty executable file
    if [ -f "${hpath}" ] && [ -s "${hpath}" ] && [ -x "${hpath}" ]; then
        source "${hpath}" "$@"
    elif [ -d "${hpath}" ]; then
        while read file; do
            # check for null string
            if [ ! -z "${file}" ]; then
                source "${file}" "$@"
            fi
        done <<< "$(find -L "${hpath}" -maxdepth 1 -type f -executable | sort)"
    fi
} # End-include_functions

include_functions "${HOOK_FOLDER}/default.d/${DOMAIN_NAME}"
include_functions "${HOOK_FOLDER}/${DOMAIN_NAME}.d/default/${HOOK_NAME}/${STATE_NAME}"
include_functions "${HOOK_FOLDER}/${DOMAIN_NAME}.d/${GUEST_NAME}/${HOOK_NAME}/${STATE_NAME}"
