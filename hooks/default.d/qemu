#! /bin/bash

# Declaring global variables
declare -ga VFIO_KMODS
declare -ga DRIVE_LIST
declare -ga HOSTDEV_LIST
declare -ga CPU_THREAD_LIST

VFIO_KMODS=("vfio" "vfio_iommu_type1" "vfio_pci")

# Space separated list of host threads not pinned by default. Leaving it blank
# assumes that all threads are not pinned
default_user_allowedCPUs=""
default_system_allowedCPUs=""
default_init_allowedCPUs=""

internal_zone=("libvirt")
internal_services=("")

external_services=("")
external_zone=("")

nfs_shares=("")
nfs_user="username"
nfs_group="username"
vm_hostname="172.16.1.0/24"

smb_shares=("")

##############################################################################
# Extract device data from tmp folder structure
##############################################################################

function get_hostdev_list {
    declare -a temp_list
    local dev_path="${1}"
    local getName="${2}"
    local type="$(basename "${dev_path}")"
    if [ -d "${dev_path}" ]; then
        if [ -d "${dev_path}/${type}-1" ]; then
            for host_dev in ${dev_path}/${type}-*; do
                local name="$(${getName} ${host_dev})"
                if [ -n "${name}" ]; then
                    temp_list[${#temp_list[@]}]="${name}"
                fi
            done
        else
            local name="$(${getName} ${dev_path})"
            if [ -n "${name}" ]; then
                temp_list[${#temp_list[@]}]="${name}"
            fi
        fi
    fi

    echo "${temp_list[@]}"
} # End-get_hostdev_list

function get_drive_path {
    local config_dev_path="${1}"
    if [[ "$(cat "${config_dev_path}/type.val")" == "block" ]]; then
        cat "${config_dev_path}/source/dev.val"
    fi
} # End-get_drive_path

function get_domain_id {
    local config_dev_path="${1}"
    local addr="${config_dev_path}/source/address"
    local domain="$(cat "${addr}/domain.val")"
    local bus="$(cat "${addr}/bus.val")"
    local slot="$(cat "${addr}/slot.val")"
    local func="$(cat "${addr}/function.val")"
    echo -n "${domain#0x}:${bus#0x}:${slot#0x}.${func#0x}"
} # End-get_domain_id

function get_host_thread {
    local config_dev_path="${1}"
    cat "${config_dev_path}/cpuset.val"
} # End-get_host_thread

function load_config_data {
    echo "Reading data from the XML"
    readarray -t DRIVE_LIST <<< "$(get_hostdev_list "${TMP_CONFIG_PATH}/domain/devices/disk" "get_drive_path")"
    readarray -t HOSTDEV_LIST <<< "$(get_hostdev_list "${TMP_CONFIG_PATH}/domain/devices/hostdev" "get_domain_id")"
    readarray -t CPU_THREAD_LIST <<< "$(get_hostdev_list "${TMP_CONFIG_PATH}/domain/cputune/vcpupin" "get_host_thread")"

    # Prints out the data in each array
    declare -p DRIVE_LIST
    declare -p HOSTDEV_LIST
    declare -p CPU_THREAD_LIST
} # End-load_config_data

##############################################################################
# Functions commonly used across multiple different types of hooks
##############################################################################

# Returns a list og GPU's that have ports for display outputs
function get_gpu_with_output_list {
    declare -a renderers
    while read r; do
        # If the renderer has ports for display out
        if [[ -n "$(ls -d ${r}/drm/card*/card*-*)" ]]; then
            renderers[${#renderers[@]}]="$(basename "$(realpath "${r}")")"
        fi
    done <<< "$(ls -d1 /sys/class/drm/render*/device)"
    echo ${renderers}
} # End-get_gpu_with_output_list

# Returns a list containing the module passed and all the modules that directly
# or indirectly depend on it
function get_module_list {
    declare -a mod_lst

    # Traverses the tree of modules in a breadth-first manner
    function traverse_mod_tree {
        declare -a used_by
        local mods="$(lsmod |
            grep -oP "${1}[[:space:]]+[[:digit:]]+[[:space:]]+[[:digit:]]+[[:space:]]+[[:word:]-_,]+")"
        local mods="${mods##* }"
        for m in $(echo "${mods}" | grep -oPm1 "[^,]+"); do
            if [[ -n "${m}" && (! " ${mod_lst[@]} " =~ " ${m} ") ]]; then
                mod_lst[${#mod_lst[@]}]="${m}"
                local used_by[${#used_by[@]}]="${m}"
            fi
        done
        for m in ${used_by[@]}; do
            traverse_mod_tree "${m}"
        done
    } # End-traverse_mod_tree

    local mod="${1}"
    local mod_lst[0]="${mod}"
    traverse_mod_tree "${mod}"
    echo "${mod_lst[@]}"
} # End-get_module_list

function detach_pci_dev {
    local device=$(basename "$(realpath "${1}")")
    local dev_path="/sys/bus/pci/devices/${device}"
    #local vendor="$(cat ${dev_path}/vendor)"
    #local device="$(cat ${dev_path}/device)"
    #local dev_id="${vendor#0x} ${device#0x}"
    local driver_path="$(realpath "${dev_path}/driver")"
    #local driver="$(basename "${driver_path}")"

    #echo "${device}" > "${driver_path}/unbind"
    echo "${device} > ${driver_path}/unbind"

    # This prevents autoprobing from automatically reconnecting the device to
    # the current driver
    #echo "${dev_id}" > "${driver_path}remove_id"
    #echo "${dev_id} > ${driver_path}remove_id"
} # End-detach_pci_dev

function attach_pci_dev {
    local device=$(basename "$(realpath "${1}")")
    local driver="${2}"
    local dev_path="/sys/bus/pci/devices/${device}"
    local driver_path="/sys/bus/pci/drivers/${driver}"

    # Resetting the pci device
    if [[ -e "${dev_path}/reset" ]]; then
        echo 1 > "${dev_path}/reset"
    else
        echo "Notice: This pci device is not directly resettable. If the \
            VM fails to start, try starting it without passing through \
            this device: ${device}" 1>&2
    fi

    # Binding the pci device to the new driver
    if [[ ! -d "${driver_path}/${device}" ]]; then
        if [[ -d "${dev_path}/driver" ]]; then
            echo -e "ERROR: This pci device is still bound to another driver.\n\
                \tDevice: ${device}\n\
                \tDriver: $(basename "$(realpath "${dev_path}/driver")")" 1>&2
            exit 2
        fi

        #echo "${device}" > "${driver_path}/bind"
        #local pred="${?}"
        local pred="$(exit 1)$?"
        case "${pred}" in
            0)
                # The device was previously bound to the driver so proceed with
                # script
            ;;
            1)
                # The device was not previously bound to the driver
                local vendor="$(cat ${dev_path}/vendor)"
                local device="$(cat ${dev_path}/device)"
                local dev_id="${vendor#0x} ${device#0x}"
                #echo "${dev_id}" > "/sys/bus/pci/drivers/${driver}/new_id"
                echo "${dev_id} > /sys/bus/pci/drivers/${driver}/new_id"
                #echo "${device}" > "${driver_path}/bind"
                #echo "${device} > ${driver_path}/bind"
            ;;
            *)
                echo -e "ERROR: The command below failed with code ${pred}:\n\
                    echo \"${device}\" > \"${driver_path}/bind\"" 1>&2
                exit 2
            ;;
        esac
    fi
} # End-attach_pci_dev

function traverse_pci_dev_tree {
    local curr_node="${1}"
    local action="${2}"
    local next_node="${3}"
    while read n; do
        if [[ -d "${n}" && -n "$n" ]]; then
            traverse_pci_dev_tree "$(realpath ${n})" "${action}" "${next_node}"
        fi
    done <<< $(ls -d1 ${curr_node}/${next_node}:pci:*:*:*.*/${next_node})

    if [ -n "$(command -v "${action}")" ]; then
        "${action}" "${curr_node}"
    else
        echo "ERROR: PCI ACTION UNDEFINED" 1>&2
        exit 2
    fi
} # End-traverse_pci_dev_tree
